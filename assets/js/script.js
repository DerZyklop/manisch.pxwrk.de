// Generated by CoffeeScript 1.6.1
(function() {
  var App, AppView, Item, ItemView, List,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      manisch: 'übersetzung fehlt',
      german: 'übersetzung fehlt'
    };

    return Item;

  })(Backbone.Model);

  List = (function(_super) {

    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.prototype.model = Item;

    List.prototype.byCategory = function(categoryName) {
      var result,
        _this = this;
      console.log('byCategory(' + categoryName + ')');
      result = [];
      _.each(this.models, function(item) {
        var currentItem;
        currentItem = item;
        return _.each(item.get('category'), function(categorie) {
          if (categorie === categoryName) {
            return result.push(currentItem);
          }
        });
      });
      return result;
    };

    return List;

  })(Backbone.Collection);

  ItemView = (function(_super) {

    __extends(ItemView, _super);

    function ItemView() {
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.tagName = 'li';

    ItemView.prototype.counter = 0;

    ItemView.prototype.initialize = function() {
      var _this = this;
      _.bindAll(this);
      return jQuery.ajax({
        url: 'site/templates/item.html',
        async: false,
        dataType: 'html',
        success: function(data) {
          return _this.template = data;
        },
        error: function() {
          return console.log('error');
        }
      });
    };

    ItemView.prototype.render = function() {
      _.templateSettings = {
        interpolate: /\{\{(.+?)\}\}/g
      };
      jQuery(this.el).html(_.template(this.template, this.model.toJSON()));
      return this;
    };

    ItemView.prototype.unrender = function() {
      console.log('unrender()');
      return $(this.el).remove();
    };

    return ItemView;

  })(Backbone.View);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = '#list';

    AppView.prototype.collection = new List;

    AppView.prototype.initialize = function() {
      var _this = this;
      console.log('initialize()');
      _.bindAll(this);
      this.counter = 0;
      this.translations = new List;
      this.translations.fetch({
        url: 'content/manisch.json',
        success: function() {
          return _this.appendAllItems();
        }
      });
      return this.render();
    };

    AppView.prototype.events = {
      'click .sort': 'getItemsByCategory'
    };

    AppView.prototype.render = function() {
      var searchTimeout,
        _this = this;
      console.log('render()');
      this.getItemsByCategory('all');
      jQuery('.sort').on('click', function(event) {
        var categoryName;
        categoryName = jQuery(event.target).attr('id');
        return _this.getItemsByCategory(categoryName);
      });
      searchTimeout = false;
      return jQuery('#search').on('keyup', function(event) {
        var searchParam;
        searchParam = jQuery(event.target).val();
        clearTimeout(searchTimeout);
        return searchTimeout = setTimeout(function() {
          return _this.getItemsBySearch(searchParam);
        }, 2000);
      });
    };

    AppView.prototype.appendAllItems = function() {
      var _this = this;
      console.log(this.translations.models);
      return _.each(this.translations.models, function(item) {
        return _this.appendItem(item);
      });
    };

    AppView.prototype.appendItem = function(item) {
      var item_view;
      console.log('appendItem()');
      if (!item.get('counter')) {
        this.counter++;
        item.set({
          counter: this.counter
        });
      }
      item_view = new ItemView({
        model: item
      });
      return $(this.el).append(item_view.render().el);
    };

    AppView.prototype.removeAllItems = function() {
      return $(this.el).html('');
    };

    AppView.prototype.getItemsBySearch = function(searchParam) {
      return console.log(searchParam);
    };

    AppView.prototype.getItemsByCategory = function(categoryName) {
      var _this = this;
      console.log('getItemsByCategory()');
      jQuery('.sort.active').removeClass('active');
      jQuery('#' + categoryName).addClass('active');
      this.removeAllItems();
      if (categoryName === 'all') {
        return this.appendAllItems();
      } else {
        return _.each(this.translations.byCategory(categoryName), function(item) {
          return _this.appendItem(item);
        });
      }
    };

    return AppView;

  })(Backbone.View);

  App = new AppView;

}).call(this);
