// Generated by CoffeeScript 1.6.3
(function() {
  var page, system, waitFor;

  waitFor = function(testFx, onReady, timeOutMillis) {
    var condition, interval, maxtimeOutMillis, start;
    maxtimeOutMillis = (timeOutMillis ? timeOutMillis : 3001);
    start = new Date().getTime();
    condition = false;
    return interval = setInterval(function() {
      if ((new Date().getTime() - start < maxtimeOutMillis) && !condition) {
        return condition = (typeof testFx === "string" ? eval_(testFx) : testFx());
      } else {
        if (!condition) {
          console.log("'waitFor()' timeout");
          return phantom.exit(1);
        } else {
          console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
          if (typeof onReady === "string") {
            eval_(onReady);
          } else {
            onReady();
          }
          return clearInterval(interval);
        }
      }
    }, 100);
  };

  system = require("system");

  if (system.args.length !== 2) {
    console.log("Usage: run-jasmine.js URL");
    phantom.exit(1);
  }

  page = require("webpage").create();

  page.onConsoleMessage = function(msg) {
    return console.log(msg);
  };

  page.open(system.args[1], function(status) {
    if (status !== "success") {
      console.log("Unable to access network");
      return phantom.exit();
    } else {
      return waitFor((function() {
        return page.evaluate(function() {
          return document.body.querySelector(".symbolSummary .pending") === null;
        });
      }), function() {
        var exitCode;
        exitCode = page.evaluate(function() {
          var desc, el, i, list, msg;
          console.log("");
          console.log(document.body.querySelector(".description").innerText);
          list = document.body.querySelectorAll(".results > #details > .specDetail.failed");
          if (list && list.length > 0) {
            console.log("");
            console.log(list.length + " test(s) FAILED:");
            i = 0;
            while (i < list.length) {
              el = list[i];
              desc = el.querySelector(".description");
              msg = el.querySelector(".resultMessage.fail");
              console.log("");
              console.log(desc.innerText);
              console.log(msg.innerText);
              console.log("");
              ++i;
            }
            return 1;
          } else {
            console.log(document.body.querySelector(".alert > .passingAlert.bar").innerText);
            return 0;
          }
        });
        return phantom.exit(exitCode);
      });
    }
  });

}).call(this);
