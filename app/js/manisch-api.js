// Generated by CoffeeScript 1.6.1
(function() {
  var BSON, Db, Server, db, mongo, populateDB, server;

  mongo = require('mongodb');

  Server = mongo.Server;

  Db = mongo.Db;

  BSON = mongo.BSONPure;

  server = Server('localhost', 27017, {
    auto_reconnect: true
  });

  db = new Db('manischdb', server);

  populateDB = function() {
    var translations;
    translations = require('../data/manisch.json');
    return db.collection('translations', function(err, collection) {
      if (!err) {
        return collection.insert(translations, {
          safe: true
        }, function(err, result) {
          if (err) {
            throw err;
          }
        });
      } else {
        throw err;
      }
    });
  };

  db.open(function(err, db) {
    if (!err) {
      console.log('Connected to the manischdb');
      return db.collection('translations', {
        strict: true
      }, function(err, collection) {
        if (err) {
          console.log('The translations collection doesnt exist. Creating it with sample data...');
          return populateDB();
        }
      });
    } else {
      throw err;
    }
  });

  exports.findAll = function(req, res) {
    return db.collection('translations', function(err, collection) {
      return collection.find().toArray(function(err, items) {
        return res.send(items);
      });
    });
  };

  exports.findById = function(req, res) {
    var id;
    id = req.params.id;
    console.log('Retrieving translation: ' + id);
    return db.collection('translations', function(err, collection) {
      return collection.findOne({
        '_id': new BSON.ObjectID(id)
      }, function(err, item) {
        return res.send(item);
      });
    });
  };

  exports.addTranslation = function() {
    var translation;
    translation = req.body;
    console.log('Adding translation: ' + JSON.stringify(translation));
    return db.collection('translations', function(err, collection) {
      return collection.insert(translation, {
        safe: true
      }, function(err, result) {
        if (err) {
          return res.send({
            'error': 'Error'
          });
        } else {
          console.log('Success!!!!');
          return res.send(result[0]);
        }
      });
    });
  };

  exports.updateTranslation = function() {
    var id, translation;
    id = req.params.id;
    translation = req.body;
    console.log('Updating translation: ' + id);
    console.log(JSON.stringify(translation));
    return db.collection('translations', function(err, collection) {
      return collection.update({
        '_id': new BSON.ObjectID(id)
      }, translation, {
        safe: true
      }, function(err, result) {
        if (err) {
          console.log('Error updating wine: ' + err);
          return res.send({
            'error': 'An error has occurred'
          });
        } else {
          console.log('' + result + ' document(s) updated');
          return res.send(translation);
        }
      });
    });
  };

  exports.deleteTranslation = function() {
    var id, translation;
    id = req.params.id;
    translation = req.body;
    console.log('Deleting translation: ' + id);
    console.log(JSON.stringify(translation));
    return db.collection('translations', function(err, collection) {
      return collection.remove({
        '_id': new BSON.ObjectID(id)
      }, translation, {
        safe: true
      }, function(err, result) {
        if (err) {
          console.log('Error updating wine: ' + err);
          return res.send({
            'error': 'An error has occurred'
          });
        } else {
          console.log('' + result + ' document(s) deleted');
          return res.send(req.body);
        }
      });
    });
  };

}).call(this);
